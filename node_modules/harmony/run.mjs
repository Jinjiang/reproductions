import path from 'path'
import { createRequire } from 'module'
import findRoot from 'find-root'
import { generateRoot } from './generate-root.mjs'

const require = createRequire(import.meta.url)

const getAspect = (name) => {
  return {
    path: findRoot(require.resolve(name)),
    name,
    packageName: name
  }
}

const getAspectDef = (aspect) => {
  if (Array.isArray(aspect)) {
    return {
      ...getAspect(aspect[0]),
      config: aspect[1]
    }
  }
  return getAspect(aspect)
}

export const run = async (config) => {
  Object.keys(config.runtimes).forEach(async (runtimeName) => {
    const rootPath = generateRoot(
      runtimeName,
      getAspectDef(config.platform), 
      config.aspects.map(aspect => getAspectDef(aspect))
    )
  
    const context = {
      root: rootPath,
      rootDir: path.dirname(rootPath)
    }

    const { run } = await import(config.runtimes[runtimeName])
    run(context)
  })
}
