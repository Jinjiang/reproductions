import fs from 'fs'
import path from 'path'

// for each aspect, it should contain:
// - path: the path to the aspect
// - name: the name of the aspect
// - packageName: the package name of the aspect
// - config: optional as the second element of the array

const getAspectRuntime = (aspectDef, runtimeName, config) => {
  if (aspectDef.config) {
    config[aspectDef.packageName] = aspectDef.config
  }
  const runtimePath = `${aspectDef.path}/${aspectDef.name}.${runtimeName}.js`
  if (fs.existsSync(runtimePath)) {
    return `${aspectDef.packageName}/${aspectDef.name}.${runtimeName}.js`
  }
  return null
}

export const generateRoot = (runtimeName, platformAspect, aspectList) => {
  const config = {}
  const platformRuntime = getAspectRuntime(platformAspect, runtimeName, config)
  const platformTrigger = runtimeName === 'browser' ? 'render' : 'run'
  const platformImport = `import { ${platformTrigger} } from "${platformRuntime}";`
  const aspectImports = aspectList.map(aspect => {
    const aspectRuntime = getAspectRuntime(aspect, runtimeName, config)
    return aspectRuntime ? `import "${aspectRuntime}";` : null
  }).filter(Boolean)
  const imports = [platformImport, ...aspectImports].join('\n')
  const configs = Object.keys(config).map(key => {
    const importSetConfig = `import * as ${key} from '${key}/${key}.config.js';`
    const setConfig = `${key}.setConfig(${JSON.stringify(config[key])});`
    return `${importSetConfig}\n${setConfig}`
  }).join('\n')
  const rootContent = `${imports}\n\n${configs}\n\n${platformTrigger}();`
  const rootPath = path.resolve(platformAspect.path, `root.${runtimeName}.mjs`)
  fs.writeFileSync(rootPath, rootContent)
  return rootPath
}
